generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Admin {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("admin")
}

model Client {
  id           String        @id @default(cuid())
  name         String
  age          Int?
  gender       String
  email        String        @unique
  phone        String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  appointments Appointment[]

  @@map("client")
}

model Professional {
  id           String        @id @default(cuid())
  name         String
  email        String        @unique
  phone        String
  specialty    String?
  active       Boolean       @default(true)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  appointments Appointment[]

  @@map("professional")
}

model Procedure {
  id           String        @id @default(cuid())
  name         String
  description  String?
  duration     Int
  price        Decimal       @db.Decimal(10, 2)
  active       Boolean       @default(true)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  appointments Appointment[]

  @@map("procedure")
}

model Appointment {
  id             String            @id @default(cuid())
  dateTime       DateTime
  status         AppointmentStatus @default(SCHEDULED)
  notes          String?
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  clientId       String
  professionalId String
  procedureId    String
  client         Client            @relation(fields: [clientId], references: [id], onDelete: Cascade)
  procedure      Procedure         @relation(fields: [procedureId], references: [id], onDelete: Cascade)
  professional   Professional      @relation(fields: [professionalId], references: [id], onDelete: Cascade)

  @@map("appointment")
}

enum AppointmentStatus {
  SCHEDULED
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELED
  NO_SHOW
}
